<#
.SYNOPSIS
    Generates structured JSON evidence for nightly baseline validation
    and performs a schema self-test before writing.

.DESCRIPTION
    Consolidates results from Fix-RepoStructure, Test-BuildGovDocs,
    Write-BaselineSnapshot, and Verify-Baseline scripts.
    Writes docs/_evidence/BaselineValidationResult-YYYYMMDD-HHmmss.json
    and validates schema completeness offline.
#>

[CmdletBinding()]
param(
    [string]$Root = (Resolve-Path (Join-Path $PSScriptRoot '..')).Path
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

# --- Prep evidence directory ------------------------------------------------
$EvidencePath = Join-Path $Root 'docs/_evidence'
if (-not (Test-Path $EvidencePath)) {
    New-Item -ItemType Directory -Path $EvidencePath | Out-Null
}

$Timestamp = (Get-Date -Format 'yyyyMMdd-HHmmss')
$OutFile = Join-Path $EvidencePath ("BaselineValidationResult-$Timestamp.json")

Write-Output "üßæ Generating baseline validation evidence ‚Üí $OutFile"

# --- Detect evidence files --------------------------------------------------
$RepoTreeLog = Get-ChildItem "$EvidencePath\RepoStructureFix-*.log" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
$GovBuildResult = Get-ChildItem "$EvidencePath\BuildGovDocsResult-*.json" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
$BaselineFile = Get-ChildItem "$Root\docs\releases\Baseline-*.md" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
$BaselineVerify = Get-ChildItem "$EvidencePath\BaselineVerifyResult-*.json" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1

# --- Helper to read JSON status --------------------------------------------
function Get-Status($path, $name) {
    if (-not $path) { return "Missing" }
    try {
        if ($path.Extension -eq ".json") {
            $json = Get-Content $path -Raw | ConvertFrom-Json
            if ($json.overall_status -eq "Success" -or $json.build_status -eq "Success") { return "Passed" }
            elseif ($json.overall_status -eq "Fail") { return "Failed" }
        }
        return "Passed"
    } catch {
        Write-Warning "‚ö†Ô∏è Could not read $name evidence: $($_.Exception.Message)"
        return "Error"
    }
}

# --- Summaries --------------------------------------------------------------
$Summary = @{
    structure_check = Get-Status $RepoTreeLog "RepoStructureFix"
    governance_build = Get-Status $GovBuildResult "BuildGovDocsResult"
    baseline_generated = if ($BaselineFile) { "Passed" } else { "Missing" }
    baseline_verified = Get-Status $BaselineVerify "BaselineVerifyResult"
}

$AllPassed = ($Summary.Values | Where-Object { $_ -ne "Passed" }).Count -eq 0
$Overall = if ($AllPassed) { "Success" } else { "Fail" }

# --- Build evidence object --------------------------------------------------
$Evidence = @{
    evidence_type = "BaselineValidationResult";
    timestamp_utc = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ");
    workflow = ".github/workflows/nightly-validate.yml";
    scripts_executed = @(
        "scripts/Fix-RepoStructure.ps1",
        "tests/Test-BuildGovDocs.ps1",
        "scripts/Write-BaselineSnapshot.ps1",
        "bin/Verify-Baseline.ps1"
    );
    controls_verified = @("CI-AUT-001", "CI-AUT-001-A", "CI-AUT-002", "CI-AUT-002-A");
    validation_summary = $Summary;
    evidence_outputs = @{
        repo_tree = if ($RepoTreeLog) { Split-Path $RepoTreeLog -Leaf } else { "N/A" };
        gov_build_results = if ($GovBuildResult) { Split-Path $GovBuildResult -Leaf } else { "N/A" };
        baseline_file = if ($BaselineFile) { Split-Path $BaselineFile -Leaf } else { "N/A" };
        baseline_verify = if ($BaselineVerify) { Split-Path $BaselineVerify -Leaf } else { "N/A" };
    };
    artifacts_uploaded = @("nightly-validation-logs.zip", "baseline-snapshot.zip");
    commit_hash = try { (git rev-parse HEAD) } catch { "unknown" };
    runner_environment = "$env:COMPUTERNAME / $env:OS / PowerShell $($PSVersionTable.PSVersion)";
    retention_days = 90;
    overall_status = $Overall;
    review_required = $false;
    notes = "Automated baseline validation evidence generated by nightly workflow.";
}


# --- Schema self-test -------------------------------------------------------
function Test-EvidenceSchema([hashtable]$obj) {
    $required = @(
        "evidence_type", "timestamp_utc", "workflow",
        "controls_verified", "validation_summary",
        "overall_status", "evidence_outputs"
    )
    $missing = @()
    foreach ($key in $required) {
        if (-not $obj.ContainsKey($key)) { $missing += $key }
    }

    $errors = @()
    if ($obj.timestamp_utc -notmatch '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$') {
        $errors += "timestamp_utc not in ISO-8601 UTC format"
    }
    if (-not ($obj.controls_verified -is [System.Collections.IEnumerable])) {
        $errors += "controls_verified should be an array"
    }
    if (-not ($obj.validation_summary -is [hashtable])) {
        $errors += "validation_summary should be an object"
    }

    if ($missing.Count -gt 0 -or $errors.Count -gt 0) {
        Write-Warning "‚ö†Ô∏è Evidence schema validation failed."
        if ($missing.Count -gt 0) { Write-Warning "Missing keys: $($missing -join ', ')" }
        if ($errors.Count -gt 0) { Write-Warning "Errors: $($errors -join '; ')" }
        return $false
    }

    Write-Output "‚úÖ Evidence schema self-test passed."
    return $true
}

if (-not (Test-EvidenceSchema $Evidence)) {
    $Evidence.overall_status = "Fail"
    $Evidence.notes += " (Schema validation failed.)"
}

# --- Finalize and hash evidence ---------------------------------------------
$Evidence | ConvertTo-Json -Depth 6 | Set-Content -Path $OutFile -Encoding UTF8
$EvidenceHash = (Get-FileHash $OutFile -Algorithm SHA256).Hash
Write-Output "üìÑ Evidence written: $OutFile"
Write-Output "üîí SHA256: $EvidenceHash"

# Optional exit code for CI gate
if ($Evidence.overall_status -eq 'Fail') {
    Write-Warning "‚ùå Baseline validation did not pass all checks."
    exit 1
}


