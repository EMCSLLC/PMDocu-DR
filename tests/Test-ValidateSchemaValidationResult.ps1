<#
.SYNOPSIS
  Validates SchemaValidationResult evidence JSON against its schema.

.DESCRIPTION
  Ensures that the output generated by scripts/Validate-EvidenceSchemas.ps1
  conforms to schemas/SchemaValidationResult.schema.json.
  Runs under Pester for CI compatibility (Invoke-Pester -Path tests).

  On completion, emits a compact CI summary line for GitHub Actions logs:
    EVIDENCE=SchemaValidationResult STATUS=PASS|FAIL|SKIPPED
#>

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
$InformationPreference = 'Continue'

$ScriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Path
$RepoRoot = Resolve-Path (Join-Path $ScriptRoot '..')
$SchemaFile = Join-Path $RepoRoot 'schemas/SchemaValidationResult.schema.json'
$EvidenceDir = Join-Path $RepoRoot 'docs/_evidence'

# Track overall outcome for CI summary
$Global:ValidationStatus = 'SKIPPED'

Describe "SchemaValidationResult Evidence Schema Validation" {

    Context "Setup Verification" {
        It "Schema file should exist" {
            Test-Path $SchemaFile | Should -BeTrue -Because "SchemaValidationResult.schema.json must be present"
        }

        It "Evidence directory should exist" {
            Test-Path $EvidenceDir | Should -BeTrue -Because "docs/_evidence directory must exist"
        }
    }

    Context "Evidence Validation" {
        $EvidenceFiles = Get-ChildItem -Path $EvidenceDir -Filter 'SchemaValidation_*.json' -File |
            Sort-Object LastWriteTime -Descending |
            Select-Object -First 1

        It "At least one SchemaValidation_*.json evidence file should exist" {
            $EvidenceFiles | Should -Not -BeNullOrEmpty -Because "Validation evidence should exist before schema testing"
        }

        if ($EvidenceFiles) {
            $EvidenceFile = $EvidenceFiles.FullName
            $json = Get-Content $EvidenceFile -Raw

            It "Should validate successfully against SchemaValidationResult.schema.json" {
                $isValid = $false
                try {
                    $isValid = Test-Json -Json $json -SchemaFile $SchemaFile -ErrorAction Stop
                    if ($isValid) {
                        $Global:ValidationStatus = 'PASS'
                    } else {
                        $Global:ValidationStatus = 'FAIL'
                    }
                } catch {
                    Write-Warning "Schema validation failed: $($_.Exception.Message)"
                    $Global:ValidationStatus = 'FAIL'
                }
                $isValid | Should -BeTrue -Because "Evidence must comply with the defined schema"
            }
        } else {
            It "Skips validation if no evidence exists" {
                $true | Should -BeTrue
                $Global:ValidationStatus = 'SKIPPED'
            }
        }
    }
}

# --- Emit compact CI summary ---------------------------------------------
Write-Output ("EVIDENCE=SchemaValidationResult STATUS={0}" -f $Global:ValidationStatus)
