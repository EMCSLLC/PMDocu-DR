name: üßπ Build & Sign Docs

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**/*.md'
      - 'scripts/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-sign:
    name: üßæ Build, Sign & Verify
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    env:
      DOCS_SRC: docs/pm
      DOCS_OUT: docs/releases
      SIGN_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      SIGN_KEY_B64: ${{ secrets.GPG_PRIVATE_KEY }}
      SIGN_KEY_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    steps:
      - name: üß≠ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup PowerShell
        uses: PowerShell/PowerShell@v1
        with:
          pwsh-version: '7.5.0'

      - name: üì¶ Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y pandoc tectonic fonts-dejavu fonts-noto-core fonts-noto-color-emoji

      - name: üß∞ Cache Tectonic packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/Tectonic
          key: ${{ runner.os }}-tectonic-${{ hashFiles('**/*.md', 'scripts/build-doc.ps1') }}
          restore-keys: |
            ${{ runner.os }}-tectonic-

      - name: üîè Import GPG private key
        if: env.SIGN_KEY_B64 != ''
        env:
          SIGN_KEY_B64: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$env:SIGN_KEY_B64" | base64 --decode | gpg --batch --import -
          gpg --list-secret-keys

      - name: üß© Build and sign Markdown files
        run: |
          $files = Get-ChildItem -Path $env:DOCS_SRC -Filter *.md -Recurse
          foreach ($f in $files) {
            pwsh -NoProfile -File scripts/build-doc.ps1 `
              -File $f.FullName `
              -Out  $env:DOCS_OUT `
              -Font "DejaVu Sans" `
              -Engine tectonic `
              -Sign
          }

      - name: üßÆ Verify SHA-256 hashes
        run: |
          $pdfs = Get-ChildItem -Path $env:DOCS_OUT -Filter *.pdf -Recurse
          foreach ($p in $pdfs) {
            pwsh -NoProfile -File scripts/verify-hash.ps1 -InputFile $p.FullName -Quiet
          }

      - name: üì¶ Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-docs
          path: |
            docs/releases/**/*.pdf
            docs/releases/**/*.asc
            docs/releases/**/*.sha256

      - name: üßæ Generate summary
        if: always()
        run: |
          $pdfCount  = (Get-ChildItem docs/releases -Filter *.pdf -Recurse).Count
          $sigCount  = (Get-ChildItem docs/releases -Filter *.asc -Recurse).Count
          $hashCount = (Get-ChildItem docs/releases -Filter *.sha256 -Recurse).Count

          $summary = @"
          ## üßæ PMDocu-DR Build Summary
          - PDFs built: $pdfCount
          - Signatures created: $sigCount
          - Hashes verified: $hashCount

          ‚úÖ All stages passed.
          "@
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
