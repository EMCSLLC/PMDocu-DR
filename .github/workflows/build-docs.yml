name: üßπ Build and Sign Docs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mode:
        description: 'Build mode: quick (default), full (rebuild all), or strict (verbose)'
        required: false
        default: 'quick'
      fail_on_warning:
        description: 'Fail build on warnings (true/false)'
        required: false
        default: 'false'

permissions:
  contents: read

jobs:
  build-docs:
    runs-on: windows-latest
    name: Build and Sign Documents

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect changed Markdown files
        id: changes
        shell: pwsh
        run: |
          Write-Host "üîé Checking for changed Markdown files..."
          $diffBase = if ('${{ github.event_name }}' -eq 'pull_request') { '${{ github.event.pull_request.base.sha }}' } else { 'HEAD~1' }
          $changedFiles = git diff --name-only $diffBase HEAD | Select-String '\.md$' | ForEach-Object { $_.ToString() }

          if (-not $changedFiles) {
              Write-Host "üü° No Markdown changes detected ‚Äî skipping document build."
              echo "changed=false" >> $env:GITHUB_OUTPUT
          } else {
              Write-Host "üßæ Changed Markdown files:"
              $changedFiles | ForEach-Object { Write-Host "  - $_" }
              echo "changed=true" >> $env:GITHUB_OUTPUT
          }

      - name: üèóÔ∏è Build documentation
        if: steps.changes.outputs.changed == 'true'
        shell: pwsh
        run: |
          $mode = '${{ github.event.inputs.mode }}'
          $failOnWarning = ('${{ github.event.inputs.fail_on_warning }}' -eq 'true')

          Write-Host "üîß Running Convert-PMDocuDRToPDF.ps1..."
          Write-Host "üîπ Mode: $mode"
          Write-Host "üîπ Fail on Warning: $failOnWarning"

          if ($mode -eq 'strict') { $VerbosePreference = 'Continue' }

          pwsh -File "scripts/Convert-PMDocuDRToPDF.ps1"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "‚ùå Document conversion failed."
              exit 1
          }
      - name: üîç Validate Build Evidence
        shell: pwsh
        run: |
          Write-Information "[ci-docs] Verifying JSON build evidence..."
          $files = Get-ChildItem 'docs/_evidence' -Filter 'BuildResult-*.json' | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $files) { Write-Error "[ci-docs] ‚ùå No build evidence found."; exit 1 }

          try {
              $null = Get-Content $files.FullName -Raw -Encoding UTF8 | ConvertFrom-Json
              Write-Information "[ci-docs] ‚úÖ $($files.Name) is valid JSON."
          } catch {
              Write-Error "[ci-docs] ‚ùå Invalid or unreadable build evidence file."
              exit 1
          }


          Write-Host "‚úÖ Base document set built successfully."

      - name: üßæ Build CI Compliance Matrix
        if: steps.changes.outputs.changed == 'true'
        shell: pwsh
        run: |
          pwsh -File "scripts/Convert-PMDocuDRToPDF.ps1" `
            -InputFile "docs/gov/CI-Compliance-Matrix.md" `
            -OutDir "docs/releases"

          if ($LASTEXITCODE -ne 0) {
              Write-Error "‚ùå CI Compliance Matrix build failed."
              exit 1
          }
          Write-Host "‚úÖ CI Compliance Matrix built successfully."

      - name: üìú Upload generated PDFs
        if: steps.changes.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docs-pdf
          path: docs/releases/*.pdf
          retention-days: 30
