name: üîè Verify Signatures

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify-signatures:
    name: Verify GPG and Hash Integrity
    runs-on: windows-latest

    steps:
      - name: üß© Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Import public GPG key for verification
        shell: pwsh
        env:
          GPG_PUBLIC_KEY_B64: ${{ secrets.CI_GPG_PUBLIC_KEY_B64 }}
          GPG_KEY_ID:          0B57BB923F762D1E
        run: |
          Write-Host "üîè Importing public GPG key for verification..."
          $env:GNUPGHOME = Join-Path $env:RUNNER_TEMP "gnupg"
          New-Item -ItemType Directory -Force -Path $env:GNUPGHOME | Out-Null

          # Decode and import the public key
          $publicPath = Join-Path $env:RUNNER_TEMP "public.asc"
          [System.IO.File]::WriteAllBytes($publicPath, [Convert]::FromBase64String($env:GPG_PUBLIC_KEY_B64))
          gpg --batch --import $publicPath
          Remove-Item $publicPath -Force

          # Configure Git for verification
          git config --global gpg.program "gpg"
          git config --global user.signingkey $env:GPG_KEY_ID

          Write-Host "‚úÖ Public key $env:GPG_KEY_ID imported successfully."
          gpg --list-keys --keyid-format=short

          # --- üß™ Lightweight validation -----------------------------------
          $sampleSig = Get-ChildItem -Recurse -Filter "*.asc" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($sampleSig) {
              Write-Host "üß™ Testing signature verification on $($sampleSig.Name)..."
              $verifyResult = gpg --verify $sampleSig.FullName 2>&1
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "‚úÖ GPG validation succeeded: key operational."
              } else {
                  Write-Warning "‚ö†Ô∏è GPG test verification returned non-zero exit code. Details:"
                  Write-Host $verifyResult
              }
          } else {
              Write-Warning "‚ö†Ô∏è No sample .asc signature found for pre-check; continuing to main verification."
          }


      - name: üîç Verify Digital Signatures
        shell: pwsh
        run: |
          Write-Output "=== Verifying document signatures ==="
          $Script = "scripts/Verify-PMDocuDRSignatures.ps1"
          if (Test-Path $Script) {
            pwsh -NoProfile -File $Script -Verbose
          } else {
            Write-Error "Verification script not found: $Script"
            exit 1
          }

      - name: üßÆ Verify SHA-256 Hashes
        shell: pwsh
        run: |
          Write-Output "=== Verifying file hashes ==="
          $Script = "scripts/verify-hash.ps1"
          if (Test-Path $Script) {
            pwsh -NoProfile -File $Script -Verbose
          } else {
            Write-Error "Verification script not found: $Script"
            exit 1
          }

      - name: üß© Build Governance PDFs (Post-Verify)
        if: success()
        shell: pwsh
        run: |
          Write-Output "=== Building Governance PDFs ==="
          $Script = "scripts/Build-GovDocs.ps1"
          if (Test-Path $Script) {
            pwsh -NoProfile -File $Script -Verbose
          } else {
            Write-Error "Governance build script not found: $Script"
            exit 1
          }

      - name: üì¶ Collect Evidence Artifacts
        if: always()
        shell: pwsh
        run: |
          $Evidence = "docs/_evidence"
          if (Test-Path $Evidence) {
            Compress-Archive -Path "$Evidence/*" -DestinationPath "verify-signature-evidence.zip" -Force
            Write-Output "Evidence archive created: verify-signature-evidence.zip"
          }

      - name: ‚¨ÜÔ∏è Upload Evidence Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-signature-evidence
          path: verify-signature-evidence.zip
          retention-days: 30
