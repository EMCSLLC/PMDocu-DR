name: üîè Verify Signatures & Governance Docs

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'scripts/**'
  pull_request:
    paths:
      - 'docs/**'
      - 'scripts/**'

permissions:
  contents: read

jobs:
  verify-signatures:
    name: üîê Verify PDF & GPG Signatures
    runs-on: windows-latest
    env:
      POWERSHELL_TELEMETRY_OPTOUT: 1
      GPG_TTY: CON

    steps:
      - name: üß© Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup GPG
        shell: pwsh
        run: |
          $GpgDir = "$env:USERPROFILE\.gnupg"
          if (-not (Test-Path $GpgDir)) { New-Item -ItemType Directory -Force -Path $GpgDir | Out-Null }

          if (Test-Path ".github/secrets/public.asc") {
            Write-Host "üîè Importing public GPG key for verification..."
            gpg --import ".github/secrets/public.asc" | Out-Host
          } else {
            Write-Warning "‚ö†Ô∏è No public.asc key found; verification may fail."
          }

      - name: üßæ Verify Existing Hashes & Signatures
        shell: pwsh
        run: |
          $PdfFiles = Get-ChildItem -Recurse -Path docs/releases -Filter '*.pdf' -ErrorAction SilentlyContinue
          if (-not $PdfFiles) {
            Write-Warning "No PDF files found for verification."
            exit 0
          }

          foreach ($pdf in $PdfFiles) {
            $asc = "$($pdf.FullName).asc"
            $hashFile = [System.IO.Path]::ChangeExtension($pdf.FullName, '.sha256')

            if (Test-Path $asc) {
              Write-Host "üîç Verifying signature for $($pdf.Name)"
              gpg --verify $asc $pdf.FullName 2>&1 | Out-Host
            } else {
              Write-Warning "‚ö†Ô∏è Missing signature for $($pdf.Name)"
            }

            if (Test-Path $hashFile) {
              $expected = (Get-Content $hashFile).Split(' ')[0]
              $actual = (Get-FileHash $pdf.FullName -Algorithm SHA256).Hash
              if ($expected -ne $actual) {
                Write-Warning "‚ö†Ô∏è Hash mismatch for $($pdf.Name)"
                exit 1
              }
            } else {
              Write-Warning "‚ö†Ô∏è Missing hash file for $($pdf.Name)"
            }
          }

  build_and_validate_govdocs:
    name: üßæ Build & Validate Governance Docs
    runs-on: windows-latest
    needs: [verify-signatures]
    env:
      POWERSHELL_TELEMETRY_OPTOUT: 1
      GPG_TTY: CON

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üß∞ Setup LaTeX (for Pandoc PDF build)
        shell: pwsh
        run: |
          choco install miktex --no-progress --yes
          & "$env:ChocolateyInstall\bin\RefreshEnv.cmd"
          $miktexBin = "C:\\Program Files\\MiKTeX\\miktex\\bin\\x64"
          if (Test-Path $miktexBin) { $env:PATH += ";$miktexBin" }
          xelatex --version

      - name: üì¶ Install Pandoc
        shell: pwsh
        run: |
          choco install pandoc --no-progress --yes
          & "$env:ChocolateyInstall\bin\RefreshEnv.cmd"
          pandoc --version

      - name: üîè Import GPG Key (Public or Private as needed)
        shell: pwsh
        run: |
          $GpgDir = "$env:USERPROFILE\.gnupg"
          if (-not (Test-Path $GpgDir)) { New-Item -ItemType Directory -Force -Path $GpgDir | Out-Null }
          if (Test-Path ".github/secrets/public.asc") {
            Write-Host "Importing GPG key..."
            gpg --import ".github/secrets/public.asc" | Out-Host
          } else {
            Write-Warning "‚ö†Ô∏è No GPG key found. Signature verification may fail."
          }

      - name: üßæ Build, Sign, and Validate Governance Docs
        shell: pwsh
        env:
          PMDOCU_MAINFONT: "Latin Modern Roman"
        run: pwsh ./scripts/Build-GovDocs.ps1
        continue-on-error: false

      - name: üß™ Re-Validate Evidence JSON (Schema & Integrity)
        shell: pwsh
        run: |
          Write-Host "üß© Running independent evidence integrity test..."
          if (Test-Path "./scripts/Test-SignVerifyEvidence.ps1") {
            pwsh ./scripts/Test-SignVerifyEvidence.ps1
          } else {
            Write-Warning "Evidence validation script not found."
          }

      - name: üóÑÔ∏è Create Governance Retention Summary
        shell: pwsh
        run: |
          $SummaryFile = "docs/_evidence/GovRetentionSummary-$((Get-Date).ToString('yyyyMMdd-HHmmss')).json"
          $Summary = [ordered]@{
            schema_version = '1.0.0'
            evidence_type  = 'GovRetentionSummary'
            timestamp_utc  = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
            retained_pdfs  = (Get-ChildItem docs/releases -Filter '*.pdf').Count
            retained_signatures = (Get-ChildItem docs/releases -Filter '*.asc').Count
            retained_hashes = (Get-ChildItem docs/releases -Filter '*.sha256').Count
            total_evidence_files = (Get-ChildItem docs/_evidence -Filter '*.json').Count
            retention_days = 30
            workflow = '.github/workflows/verify-signature.yml'
            notes = 'Governance document evidence retention summary automatically generated post-build.'
          }
          $Summary | ConvertTo-Json -Depth 4 | Set-Content -Path $SummaryFile -Encoding UTF8
          Write-Host "üßæ Governance retention summary written to $SummaryFile"

      - name: üìÑ Upload Evidence Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: governance-evidence
          path: |
            docs/_evidence/*.json
            docs/releases/*.pdf
            docs/releases/*.asc
            docs/releases/*.sha256
          if-no-files-found: warn
