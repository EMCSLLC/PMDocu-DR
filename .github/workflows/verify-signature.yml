name: üîè Verify Signatures

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify-signatures:
    name: Verify GPG and Hash Integrity
    runs-on: windows-latest

    steps:
      - name: üß© Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Import public GPG key for verification
        shell: pwsh
        env:
          GPG_PUBLIC_KEY_B64: ${{ secrets.CI_GPG_PUBLIC_KEY_B64 }}
          GPG_KEY_ID:          0B57BB923F762D1E
        run: |
          # Normalize GNUPGHOME path safely
          $gnupg = Join-Path (Convert-Path $env:RUNNER_TEMP) 'gnupg'
          if (-not (Test-Path $gnupg)) {
            New-Item -ItemType Directory -Force -Path $gnupg | Out-Null
          }

          $env:GNUPGHOME = [IO.Path]::GetFullPath($gnupg)
          Write-Output "Using GNUPGHOME: $env:GNUPGHOME"

          # Decode and import the public key
          $publicPath = Join-Path $env:RUNNER_TEMP 'public.asc'
          [System.IO.File]::WriteAllBytes($publicPath, [Convert]::FromBase64String($env:GPG_PUBLIC_KEY_B64))

          # Create writable keyring if missing
          $pubring = Join-Path $env:GNUPGHOME 'pubring.kbx'
          if (-not (Test-Path $pubring)) {
            New-Item -ItemType File -Force -Path $pubring | Out-Null
          }

          $importResult = & gpg --batch --yes --no-tty --homedir "$env:GNUPGHOME" --import "$publicPath" 2>&1
          $exit = $LASTEXITCODE
          $importResult | Out-String | Out-File -FilePath (Join-Path $env:RUNNER_TEMP 'gpg-import.log') -Encoding utf8
          Remove-Item $publicPath -Force

          if ($exit -ne 0) {
            Write-Error "GPG import failed (exit code $exit). See gpg-import.log for details."
            exit $exit
          }

          # Configure Git for signature checks
          git config --global gpg.program "gpg"
          git config --global user.signingkey $env:GPG_KEY_ID
          Write-Output "Public key $env:GPG_KEY_ID imported successfully."

          # Optional lightweight test
          $sampleSig = Get-ChildItem -Recurse -Filter "*.asc" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($sampleSig) {
            Write-Output "Testing signature verification on $($sampleSig.Name)..."
            & gpg --batch --yes --no-tty --homedir "$env:GNUPGHOME" --verify $sampleSig.FullName 2>&1 | Out-String | Out-File -FilePath (Join-Path $env:RUNNER_TEMP 'gpg-verify.log') -Encoding utf8
            if ($LASTEXITCODE -eq 0) {
              Write-Output "GPG validation succeeded: key operational."
            } else {
              Write-Warning "GPG test verification returned non-zero exit code."
            }
          } else {
            Write-Warning "No sample .asc signature found for pre-check; continuing to main verification."
          }

      - name: üîç Verify Digital Signatures
        shell: pwsh
        run: |
          Write-Output "=== Verifying document signatures ==="
          $Script = "scripts/Verify-PMDocuDRSignatures.ps1"
          if (Test-Path $Script) {
            # Run with fail-fast behavior
            pwsh -NoLogo -NoProfile -File $Script -FailOnInvalid
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Signature verification failed ‚Äî stopping workflow."
              exit $LASTEXITCODE
            }
          } else {
            Write-Error "Verification script not found: $Script"
            exit 1
          }

      - name: üßÆ Verify SHA-256 Hashes
        shell: pwsh
        run: |
          Write-Output "=== Verifying file hashes ==="
          $Script = "scripts/verify-hash.ps1"
          if (Test-Path $Script) {
            pwsh -NoProfile -File $Script -Verbose
          } else {
            Write-Error "Verification script not found: $Script"
            exit 1
          }

      - name: üß© Build Governance PDFs (Post-Verify)
        if: success()
        shell: pwsh
        run: |
          Write-Output "=== Building Governance PDFs ==="
          $Script = "scripts/Build-GovDocs.ps1"
          if (Test-Path $Script) {
            pwsh -NoProfile -File $Script -Verbose
          } else {
            Write-Error "Governance build script not found: $Script"
            exit 1
          }

      - name: üì¶ Collect Evidence Artifacts
        if: always()
        shell: pwsh
        run: |
          $Evidence = "docs/_evidence"
          if (Test-Path $Evidence) {
            Compress-Archive -Path "$Evidence/*" -DestinationPath "verify-signature-evidence.zip" -Force
            Write-Output "Evidence archive created: verify-signature-evidence.zip"
          }

      - name: ‚¨ÜÔ∏è Upload Evidence Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-signature-evidence
          path: verify-signature-evidence.zip
          retention-days: 30
