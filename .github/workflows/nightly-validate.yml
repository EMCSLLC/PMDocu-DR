name: üïí Nightly Validation

on:
  schedule:
    - cron: '0 2 * * *'   # Every night at 2 AM UTC
  workflow_dispatch:

jobs:
  nightly-validate:
    runs-on: windows-latest
    name: Validate Repository Structure, Build, Test & Verify Baseline
    env:
      POWERSHELL_TELEMETRY_OPTOUT: 1
      GPG_TTY: CON

    steps:
      - name: üß© Checkout Repository
        uses: actions/checkout@v4

      - name: üîè Import GPG key for signing
        shell: pwsh
        env:
          GPG_PRIVATE_KEY_B64: ${{ secrets.CI_GPG_PRIVATE_KEY_B64 }}
          GPG_PUBLIC_KEY_B64:  ${{ secrets.CI_GPG_PUBLIC_KEY_B64 }}
          GPG_KEY_ID:          0B57BB923F762D1E
          GPG_PASSPHRASE:      ${{ secrets.CI_GPG_PASSPHRASE }}
        run: pwsh scripts/setup-gpg-signing-ci.ps1

      - name: üß≠ Run Structure & Tree Validation
        shell: pwsh
        run: |
          Write-Output "=== Nightly Validation Started ==="
          pwsh -NoProfile -File "scripts/Fix-RepoStructure.ps1" -AutoTree -Verbose
          if ($LASTEXITCODE -ne 0) { throw "Structure validation failed." }

      - name: üß™ Run Governance Build Test
        shell: pwsh
        run: |
          Write-Output "=== Executing Test-BuildGovDocs.ps1 ==="
          pwsh -NoProfile -File "tests/Test-BuildGovDocs.ps1"
          if ($LASTEXITCODE -ne 0) { throw "Governance build test failed." }

      - name: üßæ Generate Baseline Snapshot
        if: success()
        shell: pwsh
        run: |
          Write-Output "=== Generating Baseline Snapshot ==="
          $ScriptPath = "scripts/Write-BaselineSnapshot.ps1"
          if (Test-Path $ScriptPath) {
            pwsh -NoProfile -File $ScriptPath `
              -FromTemplate "docs/_templates/Baseline-Template.md" `
              -OutDir "docs/releases"
          } else {
            Write-Warning "Baseline snapshot script not found ‚Äî skipping."
          }

      - name: üîê Verify Baseline Integrity
        if: success()
        shell: pwsh
        run: |
          Write-Output "=== Running Offline Baseline Verification ==="
          if (Test-Path "bin/Verify-Baseline.ps1") {
            pwsh -NoProfile -File "bin/Verify-Baseline.ps1"
          } else {
            Write-Warning "No Verify-Baseline.ps1 found ‚Äî skipping verification."
          }

      - name: üßæ Include Governance Review Entries
        shell: pwsh
        run: |
          $GovReview = "docs/gov/review"
          $EvidenceDir = "docs/_evidence"
          if (Test-Path $GovReview) {
              Copy-Item "$GovReview\*.md" $EvidenceDir -Force
              Write-Information "Included governance review entries."
          } else {
              Write-Information "No governance review entries found."
          }

      - name: üîê Compute Hashes for Governance Review Entries
        shell: pwsh
        run: |
          $EvidenceDir = "docs/_evidence"
          $Timestamp = (Get-Date -Format "yyyyMMdd-HHmmss")
          $OutFile = Join-Path $EvidenceDir "GovReviewHashes-$Timestamp.json"
          $Reviews = Get-ChildItem $EvidenceDir -Filter *.md -ErrorAction SilentlyContinue
          if ($Reviews) {
            $hashData = foreach ($file in $Reviews) {
              [ordered]@{ file = $file.Name; sha256 = (Get-FileHash -Path $file.FullName -Algorithm SHA256).Hash }
            }
            $hashData | ConvertTo-Json -Depth 4 | Set-Content -Path $OutFile -Encoding UTF8
            Write-Information "üßæ Governance review hashes recorded: $OutFile"
          }

      - name: üß© Write Nightly Validation Evidence JSON
        shell: pwsh
        run: |
          $EvidenceDir = "docs/_evidence"
          if (-not (Test-Path $EvidenceDir)) { New-Item -ItemType Directory -Force -Path $EvidenceDir | Out-Null }
          $Timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          $OutFile = Join-Path $EvidenceDir ("NightlyValidateResult-" + (Get-Date -Format 'yyyyMMdd-HHmmss') + ".json")

          $Result = [ordered]@{
            schema_version = "1.0.0"
            evidence_type  = "NightlyValidateResult"
            timestamp_utc  = $Timestamp
            workflow       = ".github/workflows/nightly-validate.yml"
            linked_workflows = @(".github/workflows/verify-signature.yml")
            validation_pass = $true
            structure_checked = $true
            governance_tested = $true
            baseline_verified = $true
            retention_days = 30
            notes = "Nightly repository validation, governance build verification, and evidence refresh completed."
          }

          $Result | ConvertTo-Json -Depth 4 | Set-Content -Path $OutFile -Encoding UTF8
          Write-Host "‚úÖ Nightly validation evidence written: $OutFile"

      - name: üì¶ Collect Evidence Artifacts
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "docs/_evidence") {
            Compress-Archive -Path "docs/_evidence/*" -DestinationPath "nightly-evidence.zip" -Force
            Write-Output "Evidence logs packaged for upload."
          }

      - name: ‚¨ÜÔ∏è Upload Nightly Evidence
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-validation-logs
          path: nightly-evidence.zip
          retention-days: 30

      - name: ‚¨ÜÔ∏è Upload Baseline Snapshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: baseline-snapshot
          path: docs/releases/Baseline-*.md
          retention-days: 90
